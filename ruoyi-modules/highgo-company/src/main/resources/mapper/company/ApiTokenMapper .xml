<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.highgo.company.mapper.ApiTokenMapper">

    <resultMap type="ApiToken" id="ApiTokenResult">
        <result property="tokenId" column="token_id"/>
        <result property="value" column="value"/>
        <result property="status" column="status"/>
        <result property="scope" column="scope"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="createBy" column="create_by"/>
        <result property="updateBy" column="update_by"/>
        <result property="remark" column="remark"/>
    </resultMap>

    <sql id="selectApiTokenVo">
        select token_id,
               value,
               status,
               scope,
               create_time,
               update_time,
               create_by,
               update_by,
               remark
        from api_token
    </sql>

    <select id="selectApiTokenList" parameterType="ApiToken" resultMap="ApiTokenResult">
        <include refid="selectApiTokenVo"/>
        <where>
            <if test="value != null  and value != ''">and value = #{value}</if>
            <if test="status != null  and status != ''">and status = #{status}</if>
            <if test="scope != null  and scope != ''">and scope = #{scope}</if>
        </where>
    </select>

    <select id="selectApiTokenByTokenId" parameterType="String" resultMap="ApiTokenResult">
        <include refid="selectApiTokenVo"/>
        where token_id ::varchar = #{tokenId}
    </select>
    <select id="selectInfoByToken" parameterType="String" resultMap="ApiTokenResult">
        <include refid="selectApiTokenVo"/>
        where status = 'Y' and value = #{token}
    </select>

    <insert id="insertApiToken" parameterType="ApiToken">
        insert into api_token
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="tokenId != null and tokenId != ''">token_id,</if>
            <if test="value != null and value != ''">value,</if>
            <if test="status != null and status != ''">status,</if>
            <if test="scope != null">scope,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateTime != null">update_time,</if>
            <if test="createBy != null">create_by,</if>
            <if test="updateBy != null">update_by,</if>
            <if test="remark != null">remark,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="tokenId != null and tokenId != ''">#{tokenId},</if>
            <if test="value != null and value != ''">#{value},</if>
            <if test="status != null and status != ''">#{status},</if>
            <if test="scope != null">#{scope},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="updateBy != null">#{updateBy},</if>
            <if test="remark != null">#{remark},</if>
        </trim>
    </insert>

    <update id="updateApiToken" parameterType="ApiToken">
        update api_token
        <trim prefix="SET" suffixOverrides=",">
            <if test="value != null and value != ''">value = #{value},</if>
            <if test="status != null and status != ''">status = #{status},</if>
            <if test="scope != null">scope = #{scope},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="createBy != null">create_by = #{createBy},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="remark != null">remark = #{remark},</if>
        </trim>
        where token_id ::varchar = #{tokenId}
    </update>

    <delete id="deleteApiTokenByTokenId" parameterType="String">
        delete
        from api_token
        where token_id ::varchar = #{tokenId}
    </delete>

    <delete id="deleteApiTokenByTokenIds" parameterType="String">
        delete from api_token where token_id ::varchar in
        <foreach item="tokenId" collection="array" open="(" separator="," close=")">
            #{tokenId}
        </foreach>
    </delete>
</mapper>